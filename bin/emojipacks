#!/usr/bin/env node

var Program = require('commander');
var Slack = require('../lib/slack');
var Pack = require('../lib/pack');
var co = require('co');
var Inquirer = require('inquirer');
var Valid = require('../lib/valid');

/**
 * Usage.
 */

Program
  .version(require('../package').version)
  .option('-d, --debug', 'Run in debug mode')
  .option('-s, --subdomain [value]', 'Your Slack subdomain')
  .option('-e, --email [value]', 'Admin email address')
  .option('-p, --password [value]', 'Password for admin email')
  .option('-y, --pack [value]', 'YAML emoji pack')
  .parse(process.argv);

/**
 * Start process.
 */

co(function* () {
  var user = yield Inquirer.prompt([
    {
      type: 'input',
      message: 'Enter Slack Subdomain:',
      name: 'subdomain',

      validate: function (subdomain) {
        return (Valid.subdomain(subdomain)) ? true : 'Please enter a valid slack Subdomain (letters, numbers and slashes)';
      },
      when: function (answer) {
        return !Program.subdomain;
      }
    },
    {
      type: 'input',
      message: 'email',
      name: 'email',

      validate: function (email) {
        return (Valid.email(email)) ? true : 'Please enter a valid email';
      },
      when: function (answer) {
        return !Program.email
      },
    },
    {
      type: 'password',
      message: 'Password for admin email:',
      name: 'password',
      validate: function (password) {
        return (Valid.password(password)) ? true : 'Enter a password';
      },
      when: function (answer) {
        return !Program.password
      },

    },
    {
      type: 'input',
      message: 'Name of the pack(yaml):',
      name: 'pack',
      validate: function (pack) {
        return (Valid.pack(pack)) ? true : 'Enter a valid file';
      },
      when: function (answer) {
        return !Program.pack
      }


    }]
  ).then(function (answers) {
    // Prioritice the ones issued by the argument
    return {
      url: 'https://' + ((Program.subdomain) ? Program.subdomain : answers.subdomain) + '.slack.com',
      email: (Program.email) ? Program.email : answers.email,
      password: (Program.password) ? Program.password : answers.password,
      pack: (Program.pack) ? Program.pack : answers.pack
    }
  });

  var pack = yield clean(Pack.get(user.pack));
  user.emojis = pack.emojis;
  var slack = new Slack(user, Program.debug);
  try {
    yield slack.import();
  } catch (e) {
    console.error(getStack(e.message, e.stack));
  }
  process.exit();
});

/**
 * Standardize the emoji file.
 * @param {Object} object - Yaml to object list
 * @returns {Array} List of emojis standarized and sorted by name
 */

function clean(object) {
  if (!object.emojis) {
    object.emojis = [];
    for (var i = 0; i < object.length; i++) {
      if (!object[i].src) object[i].src = object[i].image_url;
      object.emojis.push(object[i]);
    }
  }

  object.emojis.sort(function compare(a, b) {
    if (a.name < b.name) {
      return -1;
    }
    if (a.name > b.name) {
      return 1;
    }
    return 0;
  });
  return object;
}
/**
 * Get the full stack without error message. This is for the error that can be 
 * happening and allows the program to exit properly.
 * @param {String} errorMsg - Error message to be deleted from the stack
 * @param {String} stack - Full stac trace
 * @returns {String} Full stack without error message
 */
function getStack(errorMsg, stack) {
  var error = stack.split("Error: " + errorMsg + '\n');

  return error[1];
}